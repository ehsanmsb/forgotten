name: Versioning

on:
  push:
    branches:
      - "main"
    
jobs:
  versioning:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.message.outputs.new_version }}
      change_state: ${{ steps.comparison-version.outputs.change_state }}
    env:
      commit_message: "bot message"
      latest_tag_version: "1.0.0"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: semantic versioning action
        id: semantic-versioning
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true
          bump_each_commit_patch_pattern: "fix:"
          search_commit_body: true
          user_format_type: "json"
          enable_prerelease_mode: false
          debug: false
      - name: change version in pom file
        uses: Mudlet/xmlstarlet-action@master
        with:
          args: ed -L -u /_:project/_:version -v ${{ steps.semantic-versioning.outputs.version_tag }} pom.xml
      - name: commit message
        id: message
        run: |
          last_commit_message=$(git log -1 --pretty=%B)
          echo "commit_message=$last_commit_message" >> $GITHUB_ENV
          new_version=${{ steps.semantic-versioning.outputs.version_tag }}
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
      - name: commit new version
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{ env.commit_message }}
          branch: main
          commit_options: '--amend --no-edit'
          push_options: '--force'
          skip_fetch: true
      - name: Check Latest Tag
        id: get-latest-tag
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "latest_tag_version=$latest_tag" >> $GITHUB_ENV
      - name: Compare versions
        id: comparison-version
        run: |
          version=${{ steps.semantic-versioning.outputs.version_tag }}
          new_version=${version#"v"}
          version=${{ env.latest_tag_version }}
          latest_tag=${version#"v"}
          IFS='.' read -r -a new_version_parts <<< "$new_version"
          IFS='.' read -r -a latest_tag_parts <<< "$latest_tag"
          if [[ "${new_version_parts[1]}" != "${latest_tag_parts[1]}" ]]; then
             echo "change_state=release" >> "$GITHUB_OUTPUT"
          elif [[ "${new_version_parts[2]}" != "${latest_tag_parts[2]}" ]]; then
            echo "change_state=hot-fix" >> "$GITHUB_OUTPUT"
          fi
      - name: create tag from new version
        if: ${{ steps.comparison-version.outputs.change_state }}
        run: |
          git tag "${{ steps.semantic-versioning.outputs.version_tag }}"
          git push origin "${{ steps.semantic-versioning.outputs.version_tag }}" --force

  artifact:
    runs-on: ubuntu-latest
    needs: [versioning]
    steps:  
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: change version in pom file
        uses: Mudlet/xmlstarlet-action@master
        with:
          args: ed -L -u /_:project/_:version -v ${{ needs.versioning.outputs.new_version }}.jar pom.xml
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: build jar file with skipTests
        run: mvn clean install --batch-mode -DskipTests
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: change jar file directory name 
        run: mkdir app && cp target/*.jar app
      - name: upload artifact    
        uses: actions/upload-artifact@v3
        with:
          name: snapp-app-${{ needs.versioning.outputs.new_version }}.jar
          path: ./app/

  release:
    needs: [versioning, artifact]
    if: needs.versioning.outputs.change_state == 'release'
    runs-on: ubuntu-latest
    env:
      release_branch: "empty"
      current_date: "empty"
    steps:
      - name: create branch name
        id: branch-name
        run: |
          release_branch=${{ needs.versioning.outputs.new_version }}
          tmp_name="${release_branch%?}"
          release_branch="${tmp_name}x"
          echo "release_branch=$release_branch" >> $GITHUB_ENV
      - name: create release branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.SNAPP_REPO_TOKEN }}
        with:
          branch: "${{ env.release_branch }}"
          sha: '${{ github.event.pull_request.head.sha }}'
      - name: current time
        run: |
          current_date=$(date +"%Y%m%d")
          echo "current_date=$current_date" >> $GITHUB_ENV
      - name: Build Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.SNAPP_REPO_TOKEN }}
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: snapp-app-${{ needs.versioning.outputs.new_version }}.jar
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SNAPP_REPO_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.new_version }}
          release_name: ${{ needs.versioning.outputs.new_version }}-${{ env.current_date }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
      - name: upload release artifact
        uses: actions/upload-release-asset@v1
        if: needs.versioning.outputs.change_state == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.SNAPP_REPO_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./snapp-app-${{ needs.versioning.outputs.new_version }}.jar
          asset_name: snapp-app-${{ needs.versioning.outputs.new_version }}-${{ env.current_date }}.jar
          asset_content_type: application
