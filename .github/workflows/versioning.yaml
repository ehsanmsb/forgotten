name: Versioning

on:
  pull_request_review:
    types:
      - submitted
# on:
#   workflow_dispatch:
    
jobs:
  versioning:
    if: github.event.review.state == 'APPROVED'
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
    outputs:
      new_version: ${{ steps.commit-pom.outputs.app_version }}    
    env:
      new_version_flag: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - name: Check commit message
      #   id: commit
      #   run: |
      #     commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
      #     if [[ "$commit_message" == *"BREAKING CHANGE:"* || "$commit_message" == *"fix:"* || "$commit_message" == *"feat:"* ]]; then
      #       echo "new_version_flag=true" >> $GITHUB_ENV
      #       echo "Commit message contains conventional commits specification for create new version. Workflow will run."
      #     else
      #       echo "Commit message does not contain conventional commits specification. Workflow will be skipped."
      #     fi
      - name: semantic versioning action
        # if: env.new_version_flag == 'true'
        id: semantic-versioning
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "fix:"
          search_commit_body: true
          user_format_type: "json"
          enable_prerelease_mode: false
          debug: false
      - name: change version in pom file
        # if: env.new_version_flag == 'true'
        uses: Mudlet/xmlstarlet-action@master
        with:
          args: ed -L -u /_:project/_:version -v ${{ steps.semantic-versioning.outputs.version_tag }} pom.xml
      - name: commit new version
        # if: env.new_version_flag == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: version ${{ steps.semantic-versioning.outputs.version_tag }} is generated"
          branch: $GITHUB_HEAD_REF 
      # - name: commit and push pom file
      #   # if: env.new_version_flag == 'true'
      #   id: commit-pom
      #   run: |
      #     echo "app_version=${{ steps.semantic-versioning.outputs.version_tag }}" >> "$GITHUB_OUTPUT"
      #     git config user.name 'versioning_bot'
      #     git config user.email 'versioning.bot@gmail.com'
      #     if $(git remote -v | grep -q "github_origin")
      #     then
      #       git remote set-url github_origin https://x-access-token:${{ secrets.SNAPP_REPO_TOKEN }}@github.com/$GITHUB_REPOSITORY
      #     else
      #       git remote add github_origin https://x-access-token:${{ secrets.SNAPP_REPO_TOKEN }}@github.com/$GITHUB_REPOSITORY
      #     fi
      #     git add .
      #     git commit --amend -m  "$(git log -1 --pretty=%B)"
      #     git push -f github_origin HEAD:$GITHUB_REF_NAME -o ci.skip